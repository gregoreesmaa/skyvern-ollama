**Objective:** Execute the following instructions with absolute precision. **Your primary task is to first accurately interpret the visual state presented in the `screenshot`**, and *only then* determine the most efficient, logically sound sequence of next actions required to achieve the user's goal, adhering strictly to the constraints below. Prioritize finding a path forward if possible, considering recovery actions or alternatives on the current page before terminating.

**Inputs:**

1.  **`navigation_goal`:**
    ```
    {{ navigation_goal }}
    ```
2.  **`navigation_payload_str` (User Details):**
    ```
    {{ navigation_payload_str }}
    ```
3.  **`current_url`:** `{{ current_url }}`
4.  **`local_datetime`:** `{{ local_datetime }}`
5.  **`elements` (Interactable DOM Elements):**
    ```
    {{ elements }}
    ```
6.  **`screenshot`:** Provided image of the current webpage. (**Absolute source of truth for current page state**).
7.  **`action_history`:**
    ```
    {{ action_history }}
    ```
8.  **`complete_criterion` (Optional):**
    ```
    {{ complete_criterion if complete_criterion else 'N/A' }}
    ```
9.  **`error_code_mapping_str` (Optional):**
    ```
    {{ error_code_mapping_str if error_code_mapping_str else 'N/A' }}
    ```
10. **`data_extraction_goal` (Optional):**
    ```
    {{ data_extraction_goal if data_extraction_goal else 'N/A' }}
    ```
11. **`verification_code_check`:** {% if verification_code_check %}True{% else %}False{% endif %}

**Core Task & Constraints (Follow Strictly & Literally):**

1.  **Comprehensive Context Use:** You **must** consider *all* provided input sections in your analysis, **prioritizing the `screenshot` for state assessment.**
2.  **Visual Grounding & Structure:** **CRITICAL & MANDATORY FIRST STEP:**
    a.  **Analyze Screenshot First:** Before any other analysis or action planning, meticulously examine the `screenshot`. Determine the actual page type and content (e.g., "Login Form", "Error Page: 404 Not Found", "Product Listing").
    b.  **Visually Identify Elements:** Identify potentially relevant interactive elements *solely based on their visual appearance* in the `screenshot`. Note their likely type (input field, button, link) and purpose from visual cues. Consider elements needed for the goal AND elements needed for recovery (e.g., cookie banner 'accept' buttons, pop-up 'close' buttons).
    c.  **Assess Goal Alignment:** Compare the visually confirmed state and elements with the expectations from `navigation_goal`. Note discrepancies.
    d.  **Correlate AFTER Visual Confirmation:** *Only after* visually confirming an element's presence, relevance, and appropriate type, correlate it with the `elements` list to find its `id`.
    e.  **DO NOT HALLUCINATE:** **Never** select actions or element IDs for elements not clearly visible and appropriate in the `screenshot`.
3.  **Strict Input Reliance (No External Knowledge/Generalization):** Base analysis and actions *exclusively* on the provided inputs (with `screenshot` as the primary state source). **DO NOT** use external knowledge, web assumptions, or generalize. Interpret the specific visual state literally.
4.  **Objective Interpretation & Pathfinding:** Analyze the page state objectively based *only* on visual/DOM evidence (Constraint #2).
    a.  **Initial Feasibility:** Does the visually confirmed page state fundamentally prevent the goal (e.g., is it clearly the wrong type of page, like a 404 error when a form is expected)?
    b.  **Recovery Check (If Needed):** If the *direct next step* of the `navigation_goal` isn't immediately possible visually, **but the page type seems generally correct (not fundamentally wrong like a 404 error)**, check `action_history` (Constraint #10) and visually scan for recovery actions:
        * Can a recent failed action be retried differently (e.g., clicking a slightly different element)?
        * Is there a visible overlay, cookie banner, or pop-up that needs closing first? Identify the relevant button/link visually.
        * Are there other visible elements that might logically lead towards the goal state?
    c.  **Termination Condition:** You should **ONLY** select "TERMINATE" if:
        * The visually confirmed page type is fundamentally wrong for the goal (e.g., 404 error, completely unrelated site identified in Constraint #2a), **OR**
        * The page seems generally correct, but the goal's next step is visually blocked, **AND** no potential recovery actions (like closing overlays or alternative clicks on relevant elements) can be identified visually after considering the action history.
    d.  Prioritize proceeding towards the goal, attempting recovery actions if necessary and visually plausible, before resorting to termination.
5.  **Logical Consistency & Efficiency:** Ensure the `action_plan` is coherent, efficient (direct path preferred, recovery actions if needed), and step-by-step. The `reasoning` must justify the chosen path (direct or recovery) based on the visual analysis.
6.  **Goal-Oriented (Visually Constrained & Recoverable) Actions:** Use *only* **visually verified `elements`**. Prioritize actions directly progressing the `navigation_goal`. If blocked, attempt visually identifiable recovery actions (closing overlays, etc.) before terminating.
7.  **SVG Interpretation:** Determine SVG function based *strictly* on visual shape and context in the `screenshot`.
8.  **User Detail Integration:** Use `navigation_payload_str` *only* when necessary for an input field that has been **visually confirmed** as appropriate in the `screenshot`.
9.  **Prioritization:** Prioritize actions on visually confirmed error messages or elements within visually confirmed pop-ups/overlays that might be blocking progress (e.g., cookie banners).
10. **Action History Review & Recovery:** Evaluate `action_history`. If prior actions failed, analyze *why* based on the current visual state. Use this analysis to inform the recovery check in Constraint #4b. Formulate a *different, visually grounded* plan if a recovery path seems possible.
11. **Strict JSON Output:** Generate **ONLY** a valid JSON object adhering *exactly* to the format below. **NO** text, explanations, or comments outside the JSON structure.

**Output JSON Format:**

```json
{
    "user_goal_stage": "string", // Description of progress based *strictly* on the **visually confirmed** state. Indicate if recovery actions are being attempted. Example: "Visual analysis confirms registration page loaded, but target fields obscured by cookie banner." OR "Visual analysis confirms 404 error page; goal impossible."
    "user_goal_achieved": "boolean", // True ONLY if user goal is met based *strictly* on current visual state. False otherwise.
    "action_plan": "string", // Summary of planned actions. May include recovery steps. Example: "Close cookie banner, input email, input password, click submit." Use "TERMINATE" only per Constraint #4c.
    "actions": [ // Array of actions. Empty ONLY if `action_plan` is "COMPLETE" or "TERMINATE".
        {
            "reasoning": "string", // **Must start with visual confirmation.** Explain choice: Is it direct goal progression or a recovery action? How was element visually identified? Why ID? How fits plan? Example: "Visually identified cookie banner 'Accept' button. Clicking to reveal underlying form elements." OR "Visually confirmed email input field. Inputting text." OR "Visual assessment confirms 404 page, no recovery possible. Terminating."
            "user_detail_query": "string", // Question for required detail OR description of action intent. Example: "What is the user's username?" or "Clicking the visually confirmed 'Accept Cookies' button."
            "user_detail_answer": "string", // Answer derived *only* from user goal or user details payload.
            "confidence_float": "float", // Confidence (0.0-1.0) based on **visual clarity**. Lower if attempting recovery based on ambiguous visual cues.
            "action_type": "string", // Enum: "CLICK", "INPUT_TEXT", "UPLOAD_FILE", "SELECT_OPTION", "WAIT", "SOLVE_CAPTCHA", "COMPLETE", "TERMINATE". **Use "TERMINATE" only as per Constraint #4c.**
            "id": "string", // ID of target element from `elements` (**MUST be visually confirmed first**). Null for WAIT, COMPLETE, TERMINATE.
            "text": "string", // Text for "INPUT_TEXT". Null otherwise.
            "file_url": "string", // URL for "UPLOAD_FILE". Null otherwise.
            "download": "boolean", // True for "CLICK" if it visually appears to trigger download. False otherwise. Null for other types.
            "option": { // Required for "SELECT_OPTION". Null otherwise.
                "label": "string", // Exact visible label.
                "index": "integer", // Option index.
                "value": "string" // Option value attribute.
            }{% if error_code_mapping_str %},
            "errors": [ // Include ONLY if error mapping provided AND relevant errors visually identified. Empty array otherwise.
                {
                    "error_code": "string",
                    "reasoning": "string", // Specific reasoning linking **visually observed state** to error.
                    "confidence_float": "float"
                }
            ]{% endif %}
        }
    ]{% if verification_code_check %},
    "verification_code_reasoning": "string", // Step-by-step analysis based *only* on **screenshot/DOM**: Is code input visually needed *now*? Is availability visually indicated?
    "need_verification_code": "boolean" // True only if input visually needed now AND availability visually indicated. False otherwise.
{% endif %}
}
```