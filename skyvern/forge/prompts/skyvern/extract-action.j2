**Objective:** Execute the following instructions with absolute precision. **Your primary task is to first accurately interpret the visual state presented in the `screenshot`**, and *only then* determine the most efficient, logically sound sequence of next actions required to achieve the user's goal, adhering strictly to the constraints below.

**Inputs:**

1.  **`navigation_goal`:**
    ```
    {{ navigation_goal }}
    ```
2.  **`navigation_payload_str` (User Details):**
    ```
    {{ navigation_payload_str }}
    ```
3.  **`current_url`:** `{{ current_url }}`
4.  **`local_datetime`:** `{{ local_datetime }}`
5.  **`elements` (Interactable DOM Elements):**
    ```
    {{ elements }}
    ```
6.  **`screenshot`:** Provided image of the current webpage. (**Absolute source of truth for current page state**).
7.  **`action_history`:**
    ```
    {{ action_history }}
    ```
8.  **`complete_criterion` (Optional):**
    ```
    {{ complete_criterion if complete_criterion else 'N/A' }}
    ```
9.  **`error_code_mapping_str` (Optional):**
    ```
    {{ error_code_mapping_str if error_code_mapping_str else 'N/A' }}
    ```
10. **`data_extraction_goal` (Optional):**
    ```
    {{ data_extraction_goal if data_extraction_goal else 'N/A' }}
    ```
11. **`verification_code_check`:** {% if verification_code_check %}True{% else %}False{% endif %}

**Core Task & Constraints (Follow Strictly & Literally):**

1.  **Comprehensive Context Use:** You **must** consider *all* provided input sections in your analysis, **prioritizing the `screenshot` for state assessment.**
2.  **Visual Grounding & Structure:** **CRITICAL & MANDATORY FIRST STEP:**
    a.  **Analyze Screenshot First:** Before any other analysis or action planning, meticulously examine the `screenshot`. Determine the actual page type and content (e.g., "Login Form", "Error Page", "Product Listing").
    b.  **Visually Identify Elements:** Identify potentially relevant interactive elements *solely based on their visual appearance* in the `screenshot`. Note their likely type (input field, button, link) and purpose from visual cues.
    c.  **Verify Visual Feasibility:** Compare the visually confirmed state and elements with the expectations from `navigation_goal`. **If the `screenshot` shows a state (e.g., 'Page Not Found' error) where the immediate next step of the `navigation_goal` is impossible, this visual fact overrides all other inputs.**
    d.  **Correlate AFTER Visual Confirmation:** *Only after* visually confirming an element's presence, relevance, and appropriate type (e.g., it *looks like* an email input field, not just any link), correlate it with the `elements` list to find its `id`.
    e.  **DO NOT HALLUCINATE:** **Never** select actions or element IDs for elements not clearly visible and appropriate in the `screenshot`. Do not assume elements exist based on the goal or URL if they are not visually present.
3.  **Strict Input Reliance (No External Knowledge/Generalization):** Base analysis and actions *exclusively* on the provided inputs (with `screenshot` as the primary state source). **DO NOT** use external knowledge, web assumptions, knowledge past your cutoff date (August 2024)[cite: 10], or generalize. Interpret the specific visual state literally.
4.  **Objective Interpretation & Cautious Action:** Analyze the page state objectively based *only* on visual/DOM evidence (as prioritized in Constraint #2).
    * **Contradiction Handling:** **If Constraint #2c determines the goal's next step is impossible based on the visual evidence in the `screenshot`, you MUST select "TERMINATE" as the `action_plan` and provide a single TERMINATE action explaining the visual reason.** Do not plan other actions.
    * Select actions aiming towards the `navigation_goal` *only if visually feasible*. Avoid actions based on biased interpretations or elements not visually confirmed. Avoid irrelevant/harmful actions.
5.  **Logical Consistency & Efficiency:** Ensure the `action_plan` is coherent, efficient (direct path using **visually confirmed** elements), and step-by-step. The `reasoning` for each action must logically follow from the **visual state analysis** and feasibility check. Note ambiguity resolution based on visual evidence.
6.  **Goal-Oriented (Visually Constrained) Actions:** Use *only* **visually verified `elements`** relevant to progressing the `navigation_goal` *from the current visual state*. Do not invent elements/actions.
7.  **SVG Interpretation:** Determine SVG function based *strictly* on visual shape and context in the `screenshot`.
8.  **User Detail Integration:** Use `navigation_payload_str` *only* when necessary for an input field that has been **visually confirmed** as appropriate in the `screenshot`.
9.  **Prioritization:** Prioritize actions on visually confirmed red-highlighted elements (errors) or elements within visually confirmed pop-ups. Handle visible cookie banners if they visually obstruct necessary elements.
10. **Action History Review:** Evaluate `action_history`. If prior actions failed, formulate a *different, visually grounded, logically sound* plan or `TERMINATE`.
11. **Strict JSON Output:** Generate **ONLY** a valid JSON object adhering *exactly* to the format below. **NO** text, explanations, or comments outside the JSON structure.

**Output JSON Format:**

```json
{
    "user_goal_stage": "string", // Description of progress towards the user goal based *strictly* on the **visually confirmed** current page state analysis (Constraint #2a/b/c). Example: "Visual analysis confirms 'Page Not Found' error; goal cannot proceed on this page." OR "Visual analysis confirms registration page loaded; email field visually identified."
    "user_goal_achieved": "boolean", // True ONLY if user goal is met based *strictly* on current visual state. False otherwise.
    "action_plan": "string", // Logically consistent summary of planned actions based on **visual feasibility** (Constraint #4). Must be "TERMINATE" if visual state blocks the goal. Example: "Input email into visually confirmed field, input password, click visually confirmed submit."
    "actions": [ // Array of actions. Empty ONLY if `action_plan` is "COMPLETE" or "TERMINATE".
        {
            "reasoning": "string", // **Must start by stating the visual confirmation.** Explain: Why this action type? How was the element visually identified (appearance, label, type in screenshot)? Why this element ID (post-visual correlation)? How fits plan based on visual state? Example: "Element visually confirmed as email input field. Inputting text. ID: email_input." OR "Screenshot shows 'Page Not Found'. Terminating as goal is impossible here."
            "user_detail_query": "string", // Question for required detail OR description of action intent. Example: "What is the user's username?" or "Clicking the visually confirmed 'Login' button (ID: login_btn)."
            "user_detail_answer": "string", // Answer derived *only* from user goal or user details payload. Example: "testuser123"
            "confidence_float": "float", // Confidence (0.0-1.0) based on **visual clarity** and certainty AFTER visual check. Example: 1.0
            "action_type": "string", // Enum: "CLICK", "INPUT_TEXT", "UPLOAD_FILE", "SELECT_OPTION", "WAIT", "SOLVE_CAPTCHA", "COMPLETE", "TERMINATE". **Use "TERMINATE" if goal is visually impossible (Constraint #4).**
            "id": "string", // ID of target element from `elements` (**MUST be visually confirmed first** per Constraint #2d). Null for WAIT, COMPLETE, TERMINATE. Example: "user_input"
            "text": "string", // Text for "INPUT_TEXT". Null otherwise. Example: "testuser123"
            "file_url": "string", // URL for "UPLOAD_FILE". Null otherwise.
            "download": "boolean", // True for "CLICK" if it visually appears to trigger download. False otherwise. Null for other types.
            "option": { // Required for "SELECT_OPTION". Null otherwise.
                "label": "string", // Exact visible label. Example: "United States"
                "index": "integer", // Option index. Example: 1
                "value": "string" // Option value attribute. Example: "US"
            }{% if error_code_mapping_str %},
            "errors": [ // Include ONLY if error mapping provided AND relevant errors visually identified. Empty array otherwise.
                {
                    "error_code": "string", // Code from user-defined mapping. Example: "INVALID_LOGIN"
                    "reasoning": "string", // Specific reasoning linking **visually observed state** to error. Example: "Red text 'Invalid credentials' visually confirmed near login fields."
                    "confidence_float": "float" // Confidence (0.0-1.0). Example: 1.0
                }
            ]{% endif %}
        }
    ]{% if verification_code_check %},
    "verification_code_reasoning": "string", // Step-by-step analysis based *only* on **screenshot/DOM**: Is code input visually needed *now*? Is availability visually indicated? Example: "Page visually shows 'Enter verification code'. Input field 'otp_code' visually confirmed."
    "need_verification_code": "boolean" // True only if input visually needed now AND availability visually indicated. False otherwise. Example: true{% endif %}
}
```